generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Categories {
  id            Int                       @id @default(autoincrement())
  name          String                    @db.VarChar(255)
  clasification Categories_clasification? @default(idea)
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  Ideas         Ideas[]
}

model Evaluation_surveis {
  id           Int          @id @default(autoincrement())
  name         String       @db.Text
  // lampiran_url String       @db.LongText
  Files        Files[]
  done_at      DateTime     @db.Time(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  EvaluationId Int?
  IdeaId       Int?
  Evaluations  Evaluations? @relation(fields: [EvaluationId], references: [id], map: "Evaluation_surveis_ibfk_1")
  Idea         Ideas?       @relation(fields: [IdeaId], references: [id], map: "Evaluation_surveis_ibfk_2")

  @@index([EvaluationId], map: "EvaluationId")
  @@index([IdeaId], map: "IdeaId_to_survei")
}

model Evaluations {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.Text
  umkm_name          String               @db.VarChar(255)
  location           String               @db.Text
  // lampiran_url       String               @db.LongText
  Files              Files[]
  description        String               @db.Text
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Evaluation_surveis Evaluation_surveis[]
}

model Files {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  url       String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // IdeaId    Int?
  // Ideas     Ideas?   @relation(fields: [IdeaId], references: [id], map: "Files_ibfk_1")

  // @@index([IdeaId], map: "IdeaId")
  Ideas                Ideas?              @relation(fields: [ideasId], references: [id])
  ideasId              Int?
  Evaluation_surveis   Evaluation_surveis? @relation(fields: [evaluation_surveisId], references: [id])
  evaluation_surveisId Int?
  Evaluations          Evaluations?        @relation(fields: [evaluationsId], references: [id])
  evaluationsId        Int?
  Financial_reports    Financial_reports?  @relation(fields: [financial_reportsId], references: [id])
  financial_reportsId  Int?
}

model Financial_reports {
  id          Int      @id @default(autoincrement())
  title       String   @db.Text
  description String   @db.Text
  profit      Int
  fund        Int
  // lampiran_url String   @db.LongText
  Files       Files[]
  year        Int?
  month       Month?   @default(januari)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  IdeaId      Int?
  Ideas       Ideas?   @relation(fields: [IdeaId], references: [id], map: "Financial_reports_ibfk_1")

  @@index([IdeaId], map: "IdeaId_to_report")
}

model Fund_transactions {
  id        Int      @id @default(autoincrement())
  total     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  IdeaId    Int?
  Ideas     Ideas?   @relation(fields: [IdeaId], references: [id], map: "Fund_transactions_ibfk_1")

  @@index([IdeaId], map: "IdeaId_to_fund")
}

model Ideas {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(255)
  description         String                @db.Text
  required_fund       Int
  location            String                @db.Text
  status              Ideas_status          @default(panding)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  UserId              Int?
  CategoryId          Int?
  EvaluationSurveiId  Int?
  Categories          Categories?           @relation(fields: [CategoryId], references: [id], map: "Ideas_ibfk_2")
  Evaluation_surveis  Evaluation_surveis[]
  Users               Users?                @relation(fields: [UserId], references: [id], map: "Ideas_ibfk_1")
  Files               Files[]
  Financial_reports   Financial_reports[]
  Fund_transactions   Fund_transactions[]
  Reject_fund_reasons Reject_fund_reasons[]


  @@index([CategoryId], map: "CategoryId")
  @@index([UserId], map: "UserId")
}

model Reject_fund_reasons {
  id          Int      @id @default(autoincrement())
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  IdeaId      Int?
  Ideas       Ideas?   @relation(fields: [IdeaId], references: [id], map: "Reject_fund_reasons_ibfk_1")

  @@index([IdeaId], map: "IdeaId_to_reject")
}

model Users {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(255)
  username  String     @db.VarChar(255)
  password  String     @db.VarChar(255)
  email     String     @unique @db.VarChar(255)
  role      Users_role
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Ideas     Ideas[]
}

enum Categories_clasification {
  idea
  evaluation
}

enum Ideas_status {
  funded
  canceled
  panding
}

enum Users_role {
  admin
  umkm
}

enum Month {
  januari
  februari
  maret
  april
  mei
  juni
  juli
  agustus
  september
  oktober
  november
  desember
}
